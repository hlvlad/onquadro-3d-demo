{"version":3,"sources":["MolstarDemoViewer.ts","Viewer3D.tsx","App.js","index.js"],"names":["MolstarDemoViewer","element","plugin","currentStructure","spec","DefaultPluginUISpec","layout","initial","isExpanded","showControls","controlsDisplay","components","remoteState","config","PluginConfig","Viewport","ShowExpand","ShowAnimation","ShowSelectionMode","this","createPlugin","data","format","reprParams","a","clear","console","log","behaviors","leftPanelTabName","next","builders","rawData","_data","structure","parseTrajectory","trajectory","createModel","model","createStructure","type","coloring","uniformColor","props","color","size","sizeParams","value","colorParams","Color","fromRgb","r","g","b","typeParams","visuals","repr","createStructureRepresentationParams","build","to","apply","StateTransforms","Representation","StructureRepresentation3D","commit","newRepresenation","update","dispose","Viewer3D","id","structure3d","structure3dRepresentation","structure3dColoring","parent","useRef","useState","viewer","setViewer","useEffect","current","loadStructureFromData","updateMoleculeRepresentation","ref","App","setStructure3d","setStructure3dRepresentation","setStructure3dColoring","setUniformColor","handle3dRepresentationChange","e","target","handle3dColoringChange","fetch","then","res","text","catch","error","Viewer3dProps","className","Form","Group","as","Row","Label","column","sm","Col","Check","label","checked","onChange","c","rgb","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0c3f5ce.chunk.js","sourcesContent":["import \"molstar/lib/mol-util/polyfill\";\nimport {PluginConfig} from \"molstar/lib/mol-plugin/config\";\nimport {BuiltInTrajectoryFormat} from \"molstar/lib/mol-plugin-state/formats/trajectory\";\nimport {\n    createStructureRepresentationParams,\n    StructureRepresentationBuiltInProps\n} from \"molstar/lib/mol-plugin-state/helpers/structure-representation-params\";\nimport {StateTransforms} from \"molstar/lib/mol-plugin-state/transforms\";\nimport {PluginUIContext} from \"molstar/lib/mol-plugin-ui/context\";\nimport {DefaultPluginUISpec, PluginUISpec} from \"molstar/lib/mol-plugin-ui/spec\";\nimport {createPlugin} from \"molstar/lib/mol-plugin-ui\";\nimport {Color} from \"molstar/lib/mol-util/color\";\n\ntype RepresentationParams = {\n    type: \"ball-and-stick\" | \"cartoon\" | \"putty\",\n    coloring: \"uniform\" | \"element-symbol\",\n    uniformColor: {r: number, g: number, b: number}\n}\n\nexport class MolstarDemoViewer {\n    plugin: PluginUIContext;\n    currentStructure: any;\n\n    constructor(element: HTMLElement) {\n        const spec: PluginUISpec = {\n            ...DefaultPluginUISpec(),\n            layout: {\n                initial: {\n                    isExpanded: false,\n                    showControls: true,\n                    controlsDisplay: \"reactive\"\n                },\n            },\n            components: {\n                remoteState: \"none\"\n            },\n            config: [\n                [PluginConfig.Viewport.ShowExpand, true],\n                [PluginConfig.Viewport.ShowAnimation, false],\n                [PluginConfig.Viewport.ShowSelectionMode, false]\n            ]\n        }\n        this.plugin = createPlugin(element, spec);\n    }\n\n    async loadStructureFromData(data: string | ArrayBuffer, format: BuiltInTrajectoryFormat, reprParams: RepresentationParams) {\n        await this.plugin.clear();\n        console.log(\"Loading...\");\n        this.plugin.behaviors.layout.leftPanelTabName.next(\"data\");\n\n        const _data = await this.plugin.builders.data.rawData({data});\n        const trajectory = await this.plugin.builders.structure.parseTrajectory(_data, format);\n\n        const model = await this.plugin.builders.structure.createModel(trajectory);\n        if (!model) return;\n        const structure = await this.plugin.builders.structure.createStructure(model);\n        const {type, coloring, uniformColor} = reprParams;\n        let props: StructureRepresentationBuiltInProps = {\n            type: type,\n            color: coloring,\n            size: 'uniform',\n            sizeParams: {value: 2.0}\n        }\n        if (coloring === 'uniform') {\n            props.colorParams = { value: Color.fromRgb(uniformColor.r, uniformColor.g, uniformColor.b)}\n        }\n        if (type === 'cartoon') {\n            props.typeParams = {visuals: ['nucleotide-block']}\n        }\n        const repr = createStructureRepresentationParams(this.plugin, structure.data, props);\n        this.currentStructure = await this.plugin.build().to(structure).apply(StateTransforms.Representation.StructureRepresentation3D, repr).commit();\n    }\n\n    async updateMoleculeRepresentation(reprParams: RepresentationParams) {\n        const {type, coloring, uniformColor} = reprParams;\n        let props: StructureRepresentationBuiltInProps = {\n            type: type,\n            color: coloring,\n            size: 'uniform',\n            sizeParams: {value: 2.0}\n        }\n        if (coloring === 'uniform') {\n            props.colorParams = { value: Color.fromRgb(uniformColor.r, uniformColor.g, uniformColor.b)}\n        }\n        if (type === 'cartoon') {\n            props.typeParams = {visuals: ['nucleotide-block']}\n        }\n        if (type === 'putty') {\n            props.typeParams = {visuals: ['polymer-tube']}\n        }\n        const newRepresenation = createStructureRepresentationParams(this.plugin, void 0, props);\n        console.log(`Trying to update structure 3D Representation to ${type}`)\n        await this.plugin.build().to(this.currentStructure).update(newRepresenation).commit();\n    }\n\n    dispose() {\n        this.plugin?.dispose();\n    }\n}\n","import React, {useEffect, useLayoutEffect, useRef, useState} from \"react\";\nimport {MolstarDemoViewer} from \"./MolstarDemoViewer\";\nimport \"molstar/lib/mol-plugin-ui/skin/light.scss\";\n\ntype Viewer3DProps = {\n    id: string,\n    structure3d: string | ArrayBuffer,\n    structure3dRepresentation: \"ball-and-stick\" | \"cartoon\" | \"putty\",\n    structure3dColoring: \"uniform\" | \"element-symbol\",\n    uniformColor: {r: number, g:number, b:number}\n}\n\nconst Viewer3D = ({id, structure3d, structure3dRepresentation, structure3dColoring, uniformColor}: Viewer3DProps) => {\n    const parent = useRef<HTMLDivElement>(null);\n    const [viewer, setViewer] = useState<MolstarDemoViewer | null>(null);\n\n    useEffect(() => {\n        if (parent.current !== null) {\n            let viewer = new MolstarDemoViewer(parent.current);\n            setViewer(viewer);\n        }\n    }, [] );\n\n    useEffect(() => {\n        if (viewer !== null) {\n            viewer.loadStructureFromData(structure3d, \"mmcif\", {type: structure3dRepresentation, coloring: structure3dColoring, uniformColor: uniformColor});\n        }\n    }, [structure3d]);\n\n\n    useEffect(() => {\n        console.log(\"Updating view...\")\n        if (viewer !== null) {\n            viewer.updateMoleculeRepresentation({type: structure3dRepresentation, coloring: structure3dColoring, uniformColor: uniformColor});\n        }\n    }, [structure3dRepresentation, structure3dColoring, uniformColor]);\n\n\n    return (\n        <div id={id}>\n            <div id=\"viewer3d\" ref={parent}/>\n        </div>\n    )\n}\n\nexport default Viewer3D;\n","import './App.css';\nimport Viewer3D from './Viewer3D';\nimport Form from 'react-bootstrap/Form';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport {useEffect, useState} from \"react\";\nimport {CompactPicker} from \"react-color\";\n\nfunction App() {\n    const [structure3d, setStructure3d] = useState(null);\n    const [structure3dRepresentation, setStructure3dRepresentation] = useState(\"cartoon\");\n    const [structure3dColoring, setStructure3dColoring] = useState(\"element-symbol\");\n    const [uniformColor, setUniformColor] = useState({r:251, g:158, b:0})\n\n    function getStructure() {\n        fetch('data/coordinates.cif')\n            .then(function(res) {\n                return res.text()\n            })\n            .then(function(structure) {\n                setStructure3d(structure);\n            })\n            .catch(function(e) {\n                console.error(e);\n            })\n    }\n\n    useEffect(() => {\n        getStructure();\n    }, [])\n\n    function handle3dRepresentationChange(e) {\n        setStructure3dRepresentation(e.target.value)\n    }\n\n    function handle3dColoringChange(e) {\n        setStructure3dColoring(e.target.value)\n    }\n\n    const Viewer3dProps = {\n        structure3d,\n        structure3dRepresentation,\n        structure3dColoring,\n        uniformColor\n    }\n\n    return (\n    <div className=\"App\">\n        <div id=\"viewer3d-controls\">\n            <Form>\n                <fieldset>\n                    <Form.Group as={Row}>\n                        <Form.Label as=\"legend\" column sm={2}>\n                            3D structure appearance\n                        </Form.Label>\n                        <Col sm={10}>\n                            <Form.Check  type='radio' label='Ball and stick' checked={structure3dRepresentation === \"ball-and-stick\"} value='ball-and-stick' onChange={handle3dRepresentationChange}/>\n                            <Form.Check  type='radio' label='Cartoon' checked={structure3dRepresentation === \"cartoon\"} value=\"cartoon\" onChange={handle3dRepresentationChange}/>\n                            <Form.Check  type='radio' label='Putty' checked={structure3dRepresentation === \"putty\"} value=\"putty\" onChange={handle3dRepresentationChange}/>\n                        </Col>\n                    </Form.Group>\n                </fieldset>\n                <fieldset>\n                    <Form.Group as={Row}>\n                        <Form.Label as=\"legend\" column sm={2}>\n                            3D structure coloring\n                        </Form.Label>\n                        <Col sm={10}>\n                            <Form.Check  type='radio' label='Element symbol' checked={structure3dColoring === \"element-symbol\"} value=\"element-symbol\" onChange={handle3dColoringChange}/>\n                            <Form.Check  type='radio' label='Uniform' checked={structure3dColoring === \"uniform\"} value=\"uniform\" onChange={handle3dColoringChange}/>\n                            {structure3dColoring === \"uniform\" &&\n                                <CompactPicker color={uniformColor} onChange={c => setUniformColor(c.rgb)}/>\n                            }\n                        </Col>\n                    </Form.Group>\n                </fieldset>\n            </Form>\n        </div>\n      <Viewer3D id=\"viewer3d-wrapper\" {...Viewer3dProps}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}